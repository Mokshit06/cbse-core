// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  TEACHER
  STUDENT
  SCHOOL_INCHARGE
}

enum QuestionType {
  TEXT
  MCQ
}

model User {
  id                  String               @id @default(uuid())
  name                String
  email               String               @unique
  password            String
  image               String?
  role                UserRole?
  school              School?
  verified            Boolean              @default(false)
  class               Class?               @relation(fields: [classId], references: [id])
  classId             String?
  meetingParticipants MeetingParticipant[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Class {
  id           String    @id @default(uuid())
  participants User[]
  school       School    @relation(fields: [schoolId], references: [id])
  schoolId     String
  grade        Int
  code         String    @unique
  section      String
  tests        Test[]
  meetings     Meeting[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Meeting {
  id          String               @id @default(uuid())
  code        String               @unique
  class       Class                @relation(fields: [classId], references: [id])
  classId     String
  particpants MeetingParticipant[]
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
}

model MeetingParticipant {
  id        String         @id @default(uuid())
  user      User           @relation(fields: [userId], references: [id])
  userId    String
  meeting   Meeting        @relation(fields: [meetingId], references: [id])
  meetingId String
  note      Note?
  entries   MeetingEntry[]
  updatedAt DateTime       @updatedAt
}

model MeetingEntry {
  id                   String             @id @default(uuid())
  particpant           MeetingParticipant @relation(fields: [meetingParticipantId], references: [id])
  meetingParticipantId String
  joinedAt             DateTime           @default(now())
  leftAt               DateTime?
}

model School {
  id         String   @id @default(uuid())
  name       String
  address    String
  incharge   User     @relation(fields: [inchargeId], references: [id])
  inchargeId String
  verified   Boolean  @default(false)
  code       String   @unique
  classes    Class[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Book {
  id        String    @id @default(uuid())
  grade     Int
  name      String
  chapters  Chapter[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Chapter {
  id        String   @id @default(uuid())
  number    Int
  name      String
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    String
  pdfUrl    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notice {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id        String     @id @default(uuid())
  subject   String
  class     Class      @relation(fields: [classId], references: [id])
  classId   String
  questions Question[]
  startedAt DateTime
  endedAt   DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id         String       @id @default(uuid())
  type       QuestionType
  question   String
  answer     String
  mcqOptions String[]
  test       Test         @relation(references: [id], fields: [testId])
  testId     String
}

model Note {
  id            String              @id @default(uuid())
  text          String
  participant   MeetingParticipant? @relation(references: [id], fields: [participantId])
  participantId String?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model Session {
  sid    String   @id
  sess   Json
  expire DateTime

  @@index([expire], name: "IDX_session_expire")
  @@map("session")
}
